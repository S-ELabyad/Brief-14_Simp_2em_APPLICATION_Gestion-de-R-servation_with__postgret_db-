------------ création de la table clients-----------
 CREATE TABLE Clients(
        numPass SERIAL PRIMARY KEY, 
	nom VARCHAR(255)  UNIQUENOT NULL,
 	ville VARCHAR(255) NOT NULL
 );

------------ création de la table RESERVATIONS -----------
   CREATE TABLE Reservations(
         numR SERIAL  PRIMARY KEY, 
         numPass VARCHAR(9),
	 numC integer NOT NULL,
  	 arrivée timestamp DEFAULT CURRENT_TIMESTAMP,  
  	 départ timestamp 
	

	   	FOREIGN KEY(numPass) REFERENCES Clients(numPass) ON DELETE CASCADE ,
	        FOREIGN KEY(numC) REFERENCES Chambres(numC) ON DELETE ,

  );
------------ création de la table CHAMBRES-----------
 CREATE TABLE Chambres(
         numC SERIAL  PRIMARY KEY, 
         lits integer  DEFAULT 2,
         prix float NOT NULL
);

----------------------insertion des tables " Client" ----------------------
INSERT INTO Clients VALUES ('102','salouaElabyad','Safi');
INSERT INTO Clients VALUES (101, 'Ayoub_Abrouk', 'Nador');


----------------------insertion des tables " Chambres "----------------------
INSERT INTO Chambres VALUES (123,2,100);
INSERT INTO Chambres VALUES (124,2,800);


----------------------insertion des tables " Reservations"----------------------
INSERT INTO Reservations VALUES (502,102,'123','28/04/2021','01/05/2021');
INSERT INTO Reservations (503,101,'124','28/04/2021','01/09/2021')

.....................les  functions........................


//Affiche les chambres réservées pendant le mois d'Août-------------

CREATE or replace FUNCTION chambresReserveLeMois8 ()
RETURNS TABLE(numC Numeric ,lits Numeric,prix Numeric) as $list$

BEGIN
    RETURN QUERY SELECT
     ch.*
    FROM
     chambres AS ch,reservations AS r
     WHERE ch.numC=r.numC AND EXTRACT(MONTH FROM r.arrivee)=08
	 GROUP BY ch.numC;
END; 
$list$ LANGUAGE 'plpgsql';
-------
SELECT public.chambresreservelemois8()

// les client qui ont reservé les chambres quit coûtent plus de 700 dhs-------------

CREATE or replace FUNCTION afficherclientreservplust700dh ()
RETURNS TABLE(numPass varchar ,nom varchar,ville varchar) as $list$

BEGIN
    RETURN QUERY SELECT
     cl.*
    FROM
     chambres AS ch,reservations AS r,"clients" AS cl
     WHERE ch.numC=r.numC AND r.numPass = cl.numPass AND ch.prix>700
	 GROUP BY cl.numPass;
END; 
$list$ LANGUAGE 'plpgsql';

------
SELECT public.afficherclientreservplust700dh()
------


// les chambres reservées par les clients dont les noms commecent par A-------------

CREATE or replace FUNCTION chambresNomCommenceParA()
RETURNS TABLE(numC Numeric ,lits Numeric,prix Numeric) as $list$

BEGIN
    RETURN QUERY SELECT
     ch.*
    FROM
     chambres AS ch,reservations AS r,clients AS cl
     WHERE ch.numC=r.numC AND r.numPass = cl.numPass AND cl.nom Like'A%'
	 GROUP BY ch.numC;
END; 
$list$ LANGUAGE 'plpgsql';
------
SELECT public.chambresnomcommencepara()


// les clients qui ont réservés plus de 2 chambres-------------

CREATE or replace FUNCTION clientsReservéPlus2Chambres ()
RETURNS TABLE(numPass varchar ,nom varchar,ville varchar) as $list$

BEGIN
    RETURN QUERY SELECT 
     cl.*
    FROM
     chambres AS ch, reservations AS r,clients AS cl
     WHERE ch.numC= r.numC AND r.numPass = cl.numPass 
	 GROUP BY cl.numPass
	having count(ch.numC)>2;
END; 
$list$ LANGUAGE 'plpgsql';

------
SELECT public."clientsreservéplus2chambres"()
--------


// habitent à Casablanca et qui on passé plus de 2 réservations ont réservés plus de 2 chambres-------------

CREATE or replace FUNCTION ClientHabitCasablanca ()
RETURNS TABLE(numPass varchar ,nom varchar,ville varchar) as $list$

BEGIN
    RETURN QUERY SELECT 
     cl.*
    FROM
     chambres AS ch, reservations AS r,clients AS cl
     WHERE ch.numC= r.numC AND r.numPass = cl.numPass AND cl.ville='Casablanca' 
	 GROUP BY cl.numPass
	having count(ch.numC)>2 AND count(r.numPass)>2 ;
END; 
$list$ LANGUAGE 'plpgsql';

------

SELECT public.clienthabitcasablanca()
-------


//  procédure qui permet de modifer le prix des chambres qui des prix supérieurs à 700dhs par 1000dhs-------------

CREATE OR REPLACE PROCEDURE public.updateprix(
	)
LANGUAGE 'sql'
AS $BODY$
UPDATE chambres SET prix  = '1000' WHERE prix>700
$BODY$;


//procédure qui permet de supprimer les clients qui n'ont passé des réservations-----------------

create or replace procedure supprimerClientplusdeuxreserv()
language plpgsql    
as $delete$
begin
    delete from "clients" WHERE clients.numPass Not in(select numPass FROM reservations );
end;
$delete$
-------
CALL public.supprimerclientplusdeuxreserv()
-------


//procédure qui permet d'ajouter 100dhs pour les chambres qui ont plus de 2 lits-------------------

create or replace procedure Ajouté100dhPourLits()
language plpgsql    
as $updatePrice$
begin
    update chambres 
    set prix = prix + 100
    where lits > 1;
end;$updatePrice$

-----
CALL public.ajouté100dhpourlits()
